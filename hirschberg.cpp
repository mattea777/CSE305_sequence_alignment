#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <thread>
#include <chrono>
#include <mutex>

using namespace std;

// Function to perform global sequence alignment using the Hirschberg algorithm
pair<string, string> hirschbergAlignment(string X, string Y) {
    int m = X.length();
    int n = Y.length();

    // Base case: if either sequence is empty, return the other sequence with gaps
    if (m == 0) {
        string alignedX(n, '-');
        return make_pair(alignedX, Y);
    }
    if (n == 0) {
        string alignedY(m, '-');
        return make_pair(X, alignedY);
    }

    // Base case: if both sequences have length 1, directly align them
    if (m == 1 || n == 1) {
        int m = X.length();
        int n = Y.length();

        // Initialize the alignment matrix
        vector<vector<int> > dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 0; i <= m; i++)
            dp[i][0] = -i;
        for (int j = 0; j <= n; j++)
            dp[0][j] = -j;

        // Fill in the alignment matrix
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int match = (X[i - 1] == Y[j - 1]) ? 1 : -1;
                dp[i][j] = max(dp[i - 1][j - 1] + match, max(dp[i - 1][j] - 1, dp[i][j - 1] - 1));
            }
        }

        // Traceback to obtain the aligned sequences
        string alignedX, alignedY;
        int i = m, j = n;
        while (i > 0 || j > 0) {
            if (i > 0 && j > 0 && dp[i][j] == dp[i - 1][j - 1] + ((X[i - 1] == Y[j - 1]) ? 1 : -1)) {
                alignedX = X[i - 1] + alignedX;
                alignedY = Y[j - 1] + alignedY;
                i--;
                j--;
            } else if (i > 0 && dp[i][j] == dp[i - 1][j] - 1) {
                alignedX = X[i - 1] + alignedX;
                alignedY = "-" + alignedY;
                i--;
            } else {
                alignedX = "-" + alignedX;
                alignedY = Y[j - 1] + alignedY;
                j--;
            }
        }
        return make_pair(alignedX, alignedY);

    }

    // Compute the midpoint of sequence X
    int mid = m / 2;

    // Compute the scores and split points for the two recursive alignments
    vector<int> scoreY(n + 1, 0);
    vector<int> scoreYPrev(n + 1, 0);
    vector<int> scoreX(n + 1, 0);
    vector<int> scoreXPrev(n + 1, 0);

    for (int i = 1; i <= mid; i++) {
        for (int j = 1; j <= n; j++) {
            if (X[i - 1] == Y[j - 1])
                scoreY[j] = scoreYPrev[j - 1] + 1;
            else
                scoreY[j] = max(scoreYPrev[j], scoreY[j - 1]);
        }
        scoreYPrev = scoreY;
    }

    for (int i = m - 1; i > mid; i--) {
        for (int j = n - 1; j >= 0; j--) {
            if (X[i] == Y[j])
                scoreX[j] = scoreXPrev[j + 1] + 1;
            else
                scoreX[j] = max(scoreXPrev[j], scoreX[j + 1]);
        }
        scoreXPrev = scoreX;
    }

    // Find the split point that maximizes the sum of the scores
    int maxScore = 0;
    int splitPoint = 0;

    for (int i = 0; i <= n; i++) {
        int currentScore = scoreY[i] + scoreX[i];
        if (currentScore > maxScore) {
            maxScore = currentScore;
            splitPoint = i;
        }
    }

    // Recursively align the subsequences
    pair<string, string> align1 = hirschbergAlignment(X.substr(0, mid), Y.substr(0, splitPoint));
    pair<string, string> align2 = hirschbergAlignment(X.substr(mid), Y.substr(splitPoint));

    // Combine the aligned subsequences
    return make_pair(align1.first + align2.first, align1.second + align2.second);
}

pair<string, string> hirschbergAlignment_parallel(string X, string Y) {
    int m = X.length();
    int n = Y.length();

    // Base case: if either sequence is empty, return the other sequence with gaps
    if (m == 0) {
        string alignedX(n, '-');
        return make_pair(alignedX, Y);
    }
    if (n == 0) {
        string alignedY(m, '-');
        return make_pair(X, alignedY);
    }

    // Base case: if both sequences have length 1, directly align them
    if (m == 1 || n == 1) {
        int m = X.length();
        int n = Y.length();

        // Initialize the alignment matrix
        vector<vector<int> > dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 0; i <= m; i++)
            dp[i][0] = -i;
        for (int j = 0; j <= n; j++)
            dp[0][j] = -j;

        // Fill in the alignment matrix
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int match = (X[i - 1] == Y[j - 1]) ? 1 : -1;
                dp[i][j] = max(dp[i - 1][j - 1] + match, max(dp[i - 1][j] - 1, dp[i][j - 1] - 1));
            }
        }

        // Traceback to obtain the aligned sequences
        string alignedX, alignedY;
        int i = m, j = n;
        while (i > 0 || j > 0) {
            if (i > 0 && j > 0 && dp[i][j] == dp[i - 1][j - 1] + ((X[i - 1] == Y[j - 1]) ? 1 : -1)) {
                alignedX = X[i - 1] + alignedX;
                alignedY = Y[j - 1] + alignedY;
                i--;
                j--;
            } else if (i > 0 && dp[i][j] == dp[i - 1][j] - 1) {
                alignedX = X[i - 1] + alignedX;
                alignedY = "-" + alignedY;
                i--;
            } else {
                alignedX = "-" + alignedX;
                alignedY = Y[j - 1] + alignedY;
                j--;
            }
        }
        return make_pair(alignedX, alignedY);
    }

    // Compute the midpoint of sequence X
    int mid = m / 2;

    // Compute the scores and split points for the two recursive alignments
    vector<int> scoreY(n + 1, 0);
    vector<int> scoreYPrev(n + 1, 0);
    vector<int> scoreX(n + 1, 0);
    vector<int> scoreXPrev(n + 1, 0);

    // Parallel execution of the first half
    thread thread1([&]() {
        for (int i = 1; i <= mid; i++) {
            for (int j = 1; j <= n; j++) {
                if (X[i - 1] == Y[j - 1]) {
                    scoreY[j] = scoreYPrev[j - 1] + 1;
                } else {
                    scoreY[j] = max(scoreYPrev[j], scoreY[j - 1]);
                }
            }
            scoreYPrev = scoreY;
        }
    });

    // Execution of the second half
    for (int i = m - 1; i > mid; i--) {
        for (int j = n - 1; j >= 0; j--) {
            if (X[i] == Y[j]) {
                scoreX[j] = scoreXPrev[j + 1] + 1;
            } else {
                scoreX[j] = max(scoreXPrev[j], scoreX[j + 1]);
            }
        }
        scoreXPrev = scoreX;
    }

    // Join the first thread
    thread1.join();

    // Find the split point that maximizes the sum of the scores
    int maxScore = 0;
    int splitPoint = 0;

    for (int i = 0; i <= n; i++) {
        int currentScore = scoreY[i] + scoreX[i];
        if (currentScore > maxScore) {
            maxScore = currentScore;
            splitPoint = i;
        }
    }

    // Recursively align the subsequences
    pair<string, string> align1;
    pair<string, string> align2;

    // Parallel execution of the two recursive calls
    thread thread2([&]() {
        align1 = hirschbergAlignment_parallel(X.substr(0, mid), Y.substr(0, splitPoint));
    });
    align2 = hirschbergAlignment_parallel(X.substr(mid), Y.substr(splitPoint));

    // Join the second thread
    thread2.join();

    // Combine the aligned subsequences
    return make_pair(align1.first + align2.first, align1.second + align2.second);
}



void highlightDifferences(const std::string& str1, const std::string& str2) {
    int len = std::min(str1.length(), str2.length());

    for (int i = 0; i < len; i++) {
        if (str1[i] == str2[i]) {
            std::cout << str1[i];
        } else {
            std::cout << "#";
        }
    }

    // Print any remaining characters in the longer string
    if (str1.length() > len) {
        for (int i = len; i < str1.length(); i++) {
            std::cout << "#";
        }
    } else if (str2.length() > len) {
        for (int i = len; i < str2.length(); i++) {
            std::cout << "#";
        }
    }

    std::cout << std::endl;
}
int main() {
    string X = "CGGTCAGTCGCAATTCCTCACGAGACCCGTCCTGTTGAGCGTATCACTCTCAATGTACAAGCAACCCGAGAAGGCTGTGCCTGGACTCAACCGGATGCAGGATGGACTCCAGACACGGGGCCACCACTCTTCACACGTAAAGCAAGAACGTCGAGCAGTCATGAAAGTCTTAGTACCGCACGTGCCATCTTACTGCGAATATTGCCTGAAGCTGTACCGTTATTGGGGGGCAAAGATGAAGTTCTCCTCTTTTCATAATTGTACTGACGACAGCCGTGTTCCCGGTTTCTTCAGAGGTTAAAGAATAAGGGCTTATTGTAGGCAGAGGGACGCCCTTTTAGTGGCTGGCGTTAAGTATCTTCGGACCCCCTTGTCTATCCAGATTAATCGAATTCTCTCATTTAGGACCCTAGTAAGTCATCATTGGTATTTGAATGCGACCCCGAAGAAACCGCCTAAAAATGTCAATGGTTGGTCCACTAAACTTCATTTAATCAACTCCTAAATCGGCGCGATAGGCCATTAGAGGTTTAATTTTGTATGGCAAGGTACTTCCGATCTTAATGAATGGCCGGAAGAGGTACGGACGCGATATGCGGGGGTGAGAGGGCAAATAGGCAGGTTCGCCTTCGTCACGCTAGGAGGCAATTCTATAAGAATGCACATTGCATCGATACATAAAATGTCTCGACCGCATGCGCAACTTGTGAAGTGTCTACTATCCCTAAGCCCATTTCCCGCATAATAACCCCTGATTGTGTCCGCATCTGATGCTACCCGGGTTGAGTTAGCGTCGAGCTCGCGGAACTTATTGCATGAGTAGAGTTGAGTAAGAGCTGTTAGATGGCTCGCTGAGCTAATAGTTGCCCACAGAACGTCAAGATTAGAGAACGGTCGTAGCATTATCGGAGGTTCTCTAACTACTATCAGTACCCGTGTCTCGACTCTGCCGCGGCTACCTATCGCCTGAAAGCCAGTTGGTGTTAAGGGGTGCTCTGTCCAGGACGCCACGCGTAGTGAGACTTACATGTTCGTTGGGTTCACCCGACTCGGACCTGAGTCGACCAAGGACGCACTCGAGCTCTGAGCCCTACTGTCGAGAAATATGTATCTCGCCCCCGCAGCTTGCCAGCTCTTTCAGTATCATGGAGCCCATGGTTGAATGACTCCTATAACGAACTTCGACATGGCAAAATCCCCCCCTCGCGACTTCTAGAGAAGAAGAGTACTGACTTGAGCGCTCCCAGCACTTCAGCCAAGGAAGTTACCAATTTCTTGTTTCCGAATGACACGCGTCTCCTTGCGGGTAAATCGCCGACCGCAGAACTTACGAGCCAGGGGAAACAGTAAGGCCTAATTAGGTAAAGGGAGTAAGTGCTCGAACGGTTCAGTTGTAACCATATACTTACGCTGGATCTTCTCCGGCGAATTTTTACCGTCACCAACTACGAGATTTGAGGTAAACCAAATGAGCACATAGTGGCGCTATCCGACTATTTCCAAATTGTAACATATCGTTCCATGAAGGCCAGAGTTACTTACCGGCCCTTTCCATGCGCGCGCCATACCCTCCTAGTTCCCCGGTTATCTCTCCGAGGAGAGAGTGAGCGATCCTCCGTTAACATATTGTTACCAATGACGTAGCTATGTATTTTGCACAGGTAGCCAACGGGTTTCACATTTCACAGATAGTGGGGATCCCGGCAAAGGGCGTATATTTGCGGTCCAACATAGGCGTAAACTACGATGGCACCTACTCAGACGCAGCTCGTGCGGCGTAAATAACGTACTCATCCCAACTGATTCTCGGCAATCTACGGAGCGACATGATTATCAACAGCTGTCTAGCAGTTCTAATCTTTTGCCATGGTCGTAAAAGCCTCCAAGAGATTGATCATACCTATCGGCACAGAAGTGACACGACGCCGATGGGTAGCGGACTTTAGGTCAACCACAGTTCGGTAGGGGACAGGCCCTGCGGCGTACATCACTTTGTATGTGCAACGTGCCCAAGTGGCGCCAGGCAAGACTCAGCTGGTTCCTGTGTTAGCTCGAGGCTAGGCATGACAGCTCTTTGAACATGGGCTGGGGGCCTCGAACGGTCGAGAAGCCCATAGTACCTCGGATACCAAGTTGCGCAGGCTATAGCTTGAAGCTGTACTATTTCAGGGGGGGAGCCCTGATGGTCTCTTCTTCTGATGACTCAACTCGCTAGGGTCGTGAAGTCGATTCCTTCGATGGTTAAAAATCAAAGGCTCAGAGTGCAGACTGGAGCGCCCATCTAACGGTTCGCATCTCGAATGCTCGGTCGCCTTTCACATTCCGCGAAAATTCATACCGCTCATTCACTAGGTTGCGAAGTCTACACTGATATATGAATCCGAGCTAGAGCAGGGCTCTTAAAATTCGGAGTCGTTGATGCTCAATACTCCAATCGGTTTTTTCGTGCACCACCGCGAGTGGCTGACAAGGGTTTGACATTGAGTAGCAAGGCAGTTCCGGGCTGAATGAAGCGCCGGGAAAGGTACGCGCCTGGTATGGCAGGATTAAGAAGCCAATACAAAGGCTACATCCTCACTCGGATGGAGGCAAACGCAGAACAATGGTTACTTTTTCGATACGTGAAACATGTCCCACGGTAGCCCAAAGACTTGAGAGTCTATCACCCCTAGGGCCCTTTCCCGGATATAAACGCCAGGTTGAATCCGCATTTGGAGGTACGATGGATCAGTCTGGGTGGGGCGCGCCCCATTTATACCGTGAGTAGGGTCGACCAAGAACCGCAAGATGCGACGGTGTACAAGTAATTGTCAACAGACCATCGTGTTTTCATAATGGTACCAGGATCTTCAAGCCGTGTCAATCAAGCTCGGATTACGGTGTTTACTCCGTCCTGCGGTTACTCACGGTCTGTAATCCACCTCAAGTCAAGCCATTGCCTCTCTGAGACGCCGCATGAATTAATACGTATACTTTGCGCGGGTTCACTGCGATCCGTTCAGAGTCGTCCAAGGGCACAATCGAGCTCCCATTTGTATGTTCGGCTAACTTGTACCCAACCCCCGAAGTTTAGCAGGTCGTGGGGTGTCATGGAGCCTCTGGTTCATCCCGTGGGATATCAAGCTTCGTCTTGATAAAGCTCCCCGCTCGGGTGTAGCAGAGAAGACGCCTACTGAATTGTGCGATCCCTGCACCTCAGCTAAGGTAGCTACCAATATTTAGTTTCTAAGCCTTGCGACAGACCTCCCACTTAGATTGCCACGCATAGAGCTAGCGAGTCAGCGAAAAGCATGACGCGCTTTCAAGCGTGGCGAGTATGTGAACCAAGGCTTCGGACAGGACTATATACTTAGGTTTGATCTCGCCCCGAGAACTGTAAACCTCAACATTTATAGATTATAAGGTTAGCCGAAAATGCACGTGGTGGCGCCCGCCGACTGCTCCCTGAGTGTGGCTCTTTGTTCTGTCAACGCCCGACCTTCATCGCGGCCGATTCCTTCTGCGGACCATGTCGTCCTGATACTTTGGCCATGTTTCCGTTGTAGGAGTGAAGCCACTTGGCTTTGCGCCGTAGTTCCAATGAAAAACCTATGGACTTTGTTTAGGGTAGCATCAGGAATCTGAACCCTCAGAAAGTGGGGATCCCGGGTATAGACCTTTATCTGCGGTTCAAGTTAGGCATAAGGCTGCATGCTACCTTGTCACACCTACACTGCTCGAAGTAAATATGGGAAGCGTGCGACCTGGCTCCAGGCGTTCCGCGCCGCCACGTGTTCGTTAACTGTTGATTGGTGGCACATAAGTAATACCATGGTCCCTCAAATTCGGCTCAGTTACCTCGAGCGTTATGTCTCAAATGGCGTAGAACGGCATTGACTGTTTGACACTAGCTGGTGTTCGGTTCGGTAACGGAGAATCTGTGCGGCAATGTCATTAATACATTTGAAACGCGCCGTACCGATGCTGAGCAAGTCAGTGCAGGCTCCCGTGTTAGGATAAGGGTAAACATACAAGTCGATAGAAGATGGGTAGGGGCCTTCAATTCATCCAACACTCTACGGCTCCTCCGAGAGCTAGTAGGGCACCCTGTAGTTGGAAGGGGAACTATTTCGTGGGGCGAGCCCATACCGTCTCTCTTGCGGAAGACTTAACACGATAGGAAGCTGGAATAGTTTCGAACGATGGTTATTAATCCTAATAACGGAACGCTGTCTGGAGGATGAGTCTGACGGAGTGTAACTCGATCAGTCACTCGCTATTCGAACTGGGCGAAAGATCCCAGCGCTCATGCACTTGATCCCGAGGCCTGACCCGATATATGAGCTCAGACTAGAGCGGGGCTGTTGACGTTTGGAGTTGAAAAAATCTATTATACCAATCGGCTTCAACGTGCTCCACGGCAGGCGCCTGACGAGGGGCCCACACCGAGGAAGTAGACTGTTGCACGTTGGGGATAGCGGTAGCTAACTAAGACGCCTGCCACAACAGCAGTATCAAACCCGTACAAAGGGAACATCCACACTTTGGTGAATCGAAGCGCGGCATCAGAATTTCCTTTTGGATACCTGATACAAAGCCCATCGTGGTCCTTAGACTTCGTACACTTACACCTGCACCGCGCGCATGTGGAATTAGAGGCGAAGTACGATCCCTAGACCGACGTACGATGCAACTGTGTGGATGTGACGAGCTTCTTTTATATGCTTCGCCCGCCGGACCGGCCTCGGCATGGCGTAGCAGTGCACAAGCAAATGACAATTAACCACCGTGTATTCGTTATAACATCAGGCAGTTTAAGTCGGGACAATAGGAGCCGCAATACACAGTTTACCGCATCTTGACCTAACTGACATACTGCCATGGACGACTAGCCATGCCACTGGCTCTTAGATAGCCCGATACAGTGATTATGAAAGGTTTGCGGGGCATAGCTACGACTTGCTTAGCTACGTGCGAGGGAAGAAACTTTTGCGTATTTGTATGTTCACCCGTCTACTACCCATGCCCGGAGATTATGTAGGTTGTGAGATGCGGGAGAAGTTCTCGACCTTCCCGTGGGACGTCAACCTATCCCTTAATAGAGCATTCCGTTCGGGCATGGCAGTAAGTACGCCTTCTCAATTGTGCTAACCTTCATCCTTATCAAAGCTTGGAGCCAATGATCAGGATTATTGCCTTGCGACAGACTTCCTACTCACAGTCGCTCACATTGAGCTACTCGATGGGTCATCAGCTTGACCCGGTCTGTTGGGCCGCGATTACGTGAGTTAGGGCTCCGGACTGCGCTGTATAGTCGAATCTGATCCGGCCCCCACAACTGCAAACCCCAACTTATTTAGATAACATGATTAGCCGAAGTTGCACGGGGTGCCCACCGTGGAGTCCTCCCCGGGTGTCCCTCCTTCATTTGACGATAAGCAGCCGCTACCACCATCGATTAATACAAGGAACGGTGATGTTATCATAGATTCGGCACATTACCCTTGTAGGTGTGGAATCACTTAGCTACGCGCCGAAGTCTTATGGCAAAACCGATGGACAATGATTCGGGTAGCACTAAAAGTCCATAGCACGTGCATCCCAACGTGGCGTGCGTACAGCTTAACCACCGCTTCATGCTAAGGTGCTGGCTGCATGCTAAGTTGATACGCCTGCACTGCTCGAAGAAAATATACGAAGCGGGCGGCCTGGCCGGAGCACTACCCCATCGACGCGTACTCGAATACTGTTAATTGCTCACACATGAACAAAATAGTAGAGTGTCACTTTCAGCCCTCTTATCCTCGGCGATGTGTGTAAAATGGCGTTGATCTGGATTGACTCTATGACGGTATCTGCTGATGGGTAGGGAGATCCGGAATCTATCGGCCTATGTCACTGAAACTATCCAAACACCCCATGTCGATACTGAACGTATCGACGCATACCTCCTTCCTTGAAAACGCACAATCATACAACTGGGCACATAATGCGTACGCCCATCTAGTACACCCATCTCTGTAGGTCCAGTTCAAGAGCTGGAAGAGCACCCTCCACTTGGTCAAGTGATATCCTGGTAAGGTAAGCTCGTACCGTGATTCATGCGGCAGGGGTAAGACCATTAGAAGTAGGGATAGTCCCAAACCTCACTTACCACTGCCAATAAGGGGTCCTTATCTGAAGGATGAGTGTCAGCCAGTGTAACCCGATGAGGAACCCAGAAGCCGAACTGGGCCAGACAACCCGGCGCTAACGCACTCAAAGCCGGGACGCGACGCGACATAACGGCTAAGAGTAGCCCCGGAGTGTAGACCTTTGGGGTTGGATAAATCTGTCGTGGTAACCGGCTTCAACGACCCGTACACGTGGCACTTCAGGAGGCGCCCGCAGGGGGGAAGTTTTCTGCTATTCGAGGCCGTTCGTGGTAACTAGTTGCGTTCCTAGCCGCTATAATTGTTTCTATGCCGAGTAATGAGAACAACCACACCATAGCGATTTGACGCGGCGCCTCGGAATACCGTTTTGGCAGGCGCTTGCTAAGGCCATCGCGAATTCCAGGTATCGTGCATGTAGCGTAGGGCCGCACGCAAGTTAAACTGCTGGGGAACCGCGTTTCCACGACCGGTGCACGATTTAATTTCGCCGACGTGACGACATTCCTGCTAATGCCTCACCCGCCGGACCCCTCTCGTGATGGGGTAGCTGGACATGTCCTTGTGAGATATAACAAGAGCCTGCCTGTTTAATGATCTCACGGCGAAAGTCGGGGGGACAGCAGCGGCTGCAGACATTATACCGCAACAACACTAAGGTGAGATAACTCCGTAGTTGACTACGCATTCCTCTAGACCTTACTTGACCGGATACAGTGACTTTGACACGTTTGTGGGTTACAGCAATCACATCCAAGACTGCCTATGGAGGAAGCAACTCTTGAGTGTTAATATGTTGACCCCTGTATTAGGGATGCGGGTAGTAGATGAGCGCAGGGACACCGAGGTCAAGTACATTACCCTCTCATAGGAGGTGTTCTAGATCACCATACCACCATATCATTCGAGCATGACACTATCTGCGCTGTCCCCATCCTGGTAGTCATTATTCCTATCACGCTTTCGAGTGACTGGTGACGGATATCCCCCACGAATGAAAATCTTTTTCACTGACAGTCATATTGGGGTGCTCCTAAGCTTTTCCACTTGGCTGGGTCTGCTAGGCCTCCGTGCCCGGAGTTTCGGCGCTGTGCTGCCGAGAGCCGGCCATTGTCATTGGGGCCTCACTTGAGGATACCCCGACCTATTTTGTCGGGACCACTCGGGGTAGTCGTTGGGCTTATGCACCGTAAAGTCCTCCGCCGGCCTCCCCGCTACAGAAGATGATAAGCTCCGGCAAGCAATTATGAACAACGCAAGGATCGGCGATATAAACAGAGAAACGGCTGATTACACTTGTTCGTGTGGTATCGCTAAATAGCCTCGCGGAGCCTTATGCCATACTCGTCCGCGGAGCACTCTGGTAACGCTTATGGTCCATAGGACATTCATCGCTTCCGGGTATGCGCTCTATTTGACGATCCTTTGGCGCACAGATGCTGGCCACGAGCTAAATTAGAGCGACTGCACAACTGTAAGGTCCGTCACGCAGACGACGGCCCAGGGAGACCACTGACCCATCAACCTGTACGGGAACCTTCTGTATCGTTCTCGGACGGAGAGATAACTACAGTGCCGCTTACAGCCCCTCTGTCGTCGCCGACGTCTGTAATGTAGCCTCATTGTGATTCCACCCTATTGAGGCATTGACTGATGCGGGAAGAGATCTGAAATGAACTGGTCTATGCGACAGAAACTGTGCAGCTACCTAATCTCCTTAGTGTAGGTTCTGACCGATTCGTGCTTCGTTGAGAACTCACAATTTAACAACAGAGGACATAAGCCCTACGCCCATGATCTACTGACGTCCCTGAGGCTGCAATTCATGTAATGGGACAGTATCCGCGGCAAGTCCTAGTGCAATGGCGGTATTCTACCCTCGTACTGTAGTAGAGGCGACGCGGGTGCGGTCATCACTAATAAGGATATTGGGAAGACTCACAGGCCTCCGCCTTTAGGCGGTGCTTACTCTTACATAAAGGGGCTGTTAGTATTACCCCGCGAGGATTCGAAAAGGTGAGCCAACCCGGCCGATCCGGAGAGACGGGCCTCAAAGCCGCGTGACGACGGCTGTGGGCCCGTAACAAAATCCCCGCAATAAGCTCCCGTGAGCGTCGGTTGAACAGCCCTGGTCGGCCCCATCAGTAGCCCGAATATGTCGCTTTACGGGTCCTGGGCCGGGGTGCGATACCTTGCAGAAATCGAGGCCGTTCGTTAATTCCTGTTGCATTCGTACCGCCTATATTTGTCTCTTTGCCGGCTTATATGGACAAGCATAGCATAGCCATTTATCGGAGCGCCTCCGTACACGGTATGATCGGACGCCTCGTGAGATCAATACGTATACCAGGTGTCCTGTGAGCAGCGAAAGCCTATACGCGAGATACACTGCCAAAAATCCGCGTGATTACGAGTCGTGGCAAATTTGGTCTGGCTGTGGTCTAGACATTCCAGGCGGTGCGTCTGCTCTCGGGTGCCTCTAGTGGCTGGCTAGATAGACTAGCCGCTGGTAAACACACCATGACCCCGGCTCTCCATTGATGCCACGGCGATTGTTGGAGAGCCAGCAGCGACTGCAAACATCAGATCAGAGTAATACTAGCATGCGATAAGTCCCTAACTGACTATGGCCTTCTGTAGAGTCAACTTCACCACATATGCTGTCTCTGGCACGTGGATGGTTTAGAGGAATCAGATTCAAGTCTGGTTAACCATCAAACAGGTCTTGAGTCTAAAATTGTCGTCTCCTGCGTACGAGATGGAAATACTAGGTAACTACAGGGACTCCGACGTTATGTACGTTGCTCCGTCAGAGGCGCCATTCAGGATCACGTTACCGCGAAAAAAAGGGACCAGGAGCTCTTCTCCCCTGCGGTCACGTCTATAGAAATTACACCATTAACCCTCCTGAGAACCGGGAGGCGGGAATCCGTCACGTATGAGAAGGTATTTGCCCGATAATCAATACCCCAGGCTTCTAACTTTTTCCACTCGCTTGAGCCGGCTAGGCCTTTCTGCCCGAAGTTTCGATGGACTGGTGCCAACGCGCAGGCATAGTTTTAGGAGAATTATTCGGGGGCAGTGACAACCAACATCTCGGGTCCTGCCCAACCGGTCTACACGCTAATATAGCGAATCACCGAGAACCCGGCGCCACGCAATGGAACGTCCTTAACTCCGGCAGGCAATTAAAGGGAACGTATGTATAACGCAAAAAAACAGAAAAATAGGCGAATGAATCTTTTCTCTGTGTATCGAAGAATGGCCTCGCGGAGGCATGCGTCATGCTAGCGTGCGGGGTACTCTTGCTATCCATATGGTCCACAGGACACTCGTTGTTTTCGGATTTACCCTTTATGCGCCGGTTTTCAGCCACGCTTATGCCCAGCATCGTTACAACCAGACCGATACTAGATGTATAAAGTCCGCCATGCAGACGAGACCAGTCGGAGATTACCGAGCATTCTATCAGGTCGGCGACCACTAGTGAGCTACTGGAGCCGAGGGGTAACCACGATGCCGCTAAGAACCTCTCGGTCGACGCAAGCGATTACACTCCTGTCACATCATAATCGTTTGCTATTCAGGGGTTGACCAACACCGGAAAACTTTTCACTTGAAGTATTGTATACGACAGGGTGCGTGTACCTACCAAACCTGTTTAAACTAAGTTCAGACTAGTTGGAAGTGTGTCTAGATCTTAGTTTTCGTCACTAGAGGGCCCACGCTTTATTTTTATGATCCATTGATCTCCCAGACGCTGCAAGATTTGCAACCAGGCAGACTTGGCGGTAGGTCCTAGTGCAGCGGGACTTTTTTTCTATAGTCCTTGAGAGGAGGAGTCGTCAGTCCAGATACCTTTGATGTCC";
    string Y = "TGATTGGAAGGACCGTTGGCCCCCCACCCTTAGGCAGTGTACTCAGTTCCATAAACGAGCTATTAGATATGAGGTCCGTAGATTGAAAAGGGTGACGGAATTCGCCCGAACGGGAAAGACGGACAACTAGGTATCCTGAGCACGGTTGCGCGTCCGTATCAAGCTCCTCTTTATAGGCCCCGGTTTCTGTTGGTCGTAGAGCGCAGAACGGGTTGGGGGGATGTACGACAATATCGCTTAGTCACCTTTGGGCCACGGTCCGCTACCTTACAGGAATTGAGACCGTCCTTTAATTTCCCTTGCATATATGTTGCGTTTCTTCGACCTTTTAACCGCTCCCTTAGGAGAAAGACAGATAGCTTCTTACCCGTACTCCACCGTTGGCAGCACGATCGCATGTCCCACGTGAACCATTGGTAAACCCTGTGGCCTGTGAGCGACAAAAGCTTTAATGGGAAATTCGCGCCCATAACTTGGTCCGAATACGGGTCCTAGCAACGTTCGTCTGAGTTTGATCTATATAATACGGGCGGTATGTCTGCTTTGATCAACCTCCAATAGCTCGTATGATAGTGCACCCGCTGGTGATCACTCAATGATCTGGGCTCCCCGTTGCAACTACGGGGATTTTTCGAGACCGACCTGCGTTCGGCATTGTGGGCACAGTGAAGTATTAGCAAACGTTAAGTCCCGAACTAGATGTGACCTAACGGTAAGAGAATTTCATAATACGTCCTGCCGCACGCGCAAGGTACATTTGGACAGTATTGAATGGACTCTGATCAACCTTCACACCGATCTAGAATCGAATGCGTAGATCAGCCAGGTGCAAACCAAAAATTCTAGGTTACTAGAAGTTTTGCGACGTTCTAAGTGTTGGACGAAATGATTCGCGACCCAGGATGAGGTCGCCCTAAAAAATAGATTTCTGCAACTCTCCTCGTGAGCAGTCTGGTGTATCGAAAGTACAGGACTAGCCTTCCTAGCAACCGCGGGCTGGGAGTCTGAGACATCACTCAAGATATATGCTCGGTAACGTATGCTCTAGCCATCTAACTATTCCCTATGTCTTATAGGGGCCTACGTTATCTGCCTGTCGAACCATAGGATTCGCGTCAGCGCGCAGGCTTGGATCGAGATGAAATCTCCGGAGCCTAAGACCACGAGCGTCTGGCGTCTTGGCTAATCCCCCTACATGTTGTTATAAACAATCAGTGGAAACTCAGTGCTAGAGGGTGGAGTGACCTTAAATCAAGGACGATATTAATCGGAAGGAGTATTCAACGCAATGAAGTCGCAGGGTTGACGTGGGAATGGTGCTTCTGTCCAAACAGGTAAGGGTATGAGGCCGCAACCGTCCCCCAAGCGTACAGGGTGCACTTTGCAACGATTTCGGAGTCCAAAGACTCGCTGTTTTCGAAATTTGCGCTCAAGGGCGAGTATTGAACCAGGCTTACGCCCAAGAACGTAGCAAGGTGACTCAAACAAAGTACATCTTGCCCGCGTTTCATATGAATCAAGTTAGAAGTTATGGAGCATAATAACATGTGGATGGCCAGTGGTCGGTTGCTACACCCCTGCCGCAACGTTGAAGGTCCCGGATTAGACTGGCTGGATCTATGCCGTGACACCCGTTATACTCCATTACCGTCTGTGGGTCACAGCTTGTTGTGGACTGGATTGCCATTCTCTCAGTGTATTACGCAGGCCGGCGCACGGGTCCCATATAAACCTGTCATAGCTTACCTGACTCTACTTGGAAATGTGGCTAGGCCTTTGCCCACGCACCTGATCGGTCCTCGTTTGCTTTTTAGGACCGGATGAACTACAGAGCATTGCAAGAATCTCTACCTGCTTTACAAAGTGCTGGATCCTATTCCAGCGGGATGTTTTATCTAAACACGATGAGAGGAGTATTCGTCAGGCCACATGGCTTTCTTGTTCTGGTCGGATCCATCGTTGGCGCCCGACCCCCCCATTCCATAGTGAGTTCTTCGTCCGAGCCATTGTATGCCAGATCGACAGACAGATAGCGGATCCAGTATATCCCTGGAAACTATAGACGCACAGGTTGGAATCTTAAGTGAAGTCGCGCGTCCAAACCCAGCTCTATTTTAGTGGTCATGGGTTCTGGTCCCCCCGAGCCGCGGAACCGATTAGGACCATGTACAACAATACTTATTAGTCATCTTTTAGACACAATCTCCCTGCTCAGTGGTATATGGTTTTTGCTATAATTAGCCACCCTCATAAGTTGCACTACTTCTGCGACCCAAATGCACCCTTACCACGAAGACAGGATTGTCCGATCCTATATTACGACTTTGGCAGGGGGTTCGCAAGTCCCACCCCAAACGATGCTGAAGGCTCAGGTTACACAGGCACAAGTACTATATATACGAGTTCCCGCTCTTAACCTGGATCGAATGCAGAATCATGCATCGTACCACTGTGTTCGTGTCATCTAGGACGGGCGCAAAGGATATATAATTCAATTAAGAATACCTTATATTATTGTACACCTACCGGTCACCAGCCAACAATGTGCGGATGGCGTTACGACTTACTGGGCCTGATCTCACCGCTTTAGATACCGCACACTGGGCAATACGAGGTAAAGCCAGTCACCCAGTGTCGATCAACAGCTAACGTAACGGTAAGAGGCTCACAAAATCGCACTGTCGGCGTCCCTTGGGTATTTTACGTTAGCATCAGGTGGACTAGCATGAATCTTTACTCCCAGGCGAAAACGGGTGCGTGGACAAGCGAGCAGCAAACGAAAATTCTTGGCCTGCTTGGTGTCTCGTATTTCTCTTGGAGATCGAGGAAATGTTTCATGACCAAGGGAAAGGTCGCCCTACGAAATAGATTTGCGTTACTGTCTGCATAAGGAGTCCGGTGTAGCGAAGGATGAAGGCGACCCTAGGTAGCAACCGCCGGCTTCGGCGGTAAGGTATCACTCAGGAAGCAGACACAGAAAGACACGGTCTAGCAGATCGTTTATCGGCTAGGTCAAATAGAGTGCTTTGATATCAGCATGTCTAGCTTTAGAATTCAGTTTAGTGCGCTGATCTGAGTCGAGATAAAATCACCAGTACCCAAAACCAGGCGGGCTCGCCACGTTGGCTAATCCTGGTACATTTTGTAATCAATGTTCAGAAGAAAATTTGTGTTAGAAGGACGAGTCACCACGTACCAATAGCAACAACGATCGGTCGGACTATTCATTGTGGTGGTGACGCTCGGATTACACGGGAAAGGTGCTTGTGTCCCGACAGGCTAGGATATAATGCTGAGGCGTTACCCCAATCGTTCAGCGTGGGATTTGCTACAACTTCTGAGTGCTACATGTACGAGACCATGTTATGTATGCACAAGGCCGACAATAGGACGTAGCCTTCGAGTTAGTACGTAGCGTGGTCGCATAAGCACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTATAGCAATACGATCATATGCGGATGGGCAGTGGCCGGTAGTCACACGTCTACCGCGGTGCTCAATGACCGGGACTAAAGAGGCGAAGATTATGGTGTGTGACCCGTTATGCTCGAGTTCGGTCAGAGCGTCATTGCGAGTAGTCGATTGCTTTCTCAATCTCCGAGCGATTTAGCGTGACAGCCCCAGGGAACCCACAAAATGTGATCGCAGTCCATCCGATCGTACACAGAAAGGAAGGTCCCCATACACCGACGCACCTGTTTACACGTCGTATGCATAAACGAGCCGCACGAACCAGAGAGCATAAAGAGGACCTCTAGTTCCTTTACAAAGTACAGGTTCGCCTGTCGCCAAGATGCCTTACCTAGATGCAATGACGGACGTATTCCTCTGGCCTCAACGGTTCCTGCTTTCGCTGGGATCCAAGATTGGCAGCTGAAACCGCCTTTCCAAAGTGAGTCCTTCGTCTGTGACTAACTGTGCCAAATCGTCTTGCAAACTCCTGATCCAGTTTAACTCACCAAATTATAGCCATACAGACCCAAATTTTAAATCATATCACGCGACTAGCCTCTGCTTAATTTCTGTGCTCAAGGGTTTTGGTCCGCCCGAGCGGTGCAGCCGATTAGGACCATCTAATGCACTTGTTACAAGACTTCTTTTAAATACTTTCTTCCTGCCCAGTAGCGGATGATAATGGTTGTTGCCAGCCGGTGTGGAAGGTAACAGCACCGGTGCGAGCCTAATGTGCCGTCTCCACCAACACAAGGCTATCCGGTCGTATAATAGGATTCCGCAATGGGGTTAGCAAATGGCAGCCTAAACGATATCGGGGACTTGCGATGTACATGCTTTGGTTCAATACATACGTGACCCAGTAGTTATCCTGTATCGGAACATCAATTGTGCATCGGGCCAGCATAATCATGTCATCTGGGAAGTGGCCGTAGGATAAATAATTCAATAAAGATGTCGTTTTGCTAGTATACGTCTAGGCGTCACCCGCCATCTCTGTGCAGGTGGGCCGACGAGACATTGTCCCTGATTTCTCCACTACTAATAGCACACACGGGGCAATACCAGCACAAGCTAGTCTCGCGGGAACGCTCGTCAGCATACGAAAGAGCTTAAGGCACGCCAATTCGCACTGTCAGGGTCACTTGGGTGTTTTGCACTACCGTCAGGTACGCTAGTATGCGTTCTTCCTTCCAGAGGTATGTGGCTGCGTGGTCAAAAGTGCGGCATTCGTATTTGCTCCTCGTGTTTACTCTCACAAACTTGACCTGGAGATCAAGGAGATGCTTCTTGTGGAACTGGACAACGCATCAACGCAACGGATCTACGTTACAGCGTGCATAGTGAAAACGGAGTTGCTGACGACGAAAGCGACATTGGGATCTGTCTGTTGTCATTCGCGGAAAACATCCGTTCACGAGGCGGACACTGATTGACACGGTTTTGCAGAAGGTTAGGGGAATAGGTTAAATTGAGTGGCTTAAAAATGCTATGTCTGGGATTAAAGTGTAGTAAACTGTGATTAACGGAGACGGTTTTAAGACAGGAGTTCGCAAAATCAAGCGGGGTCATTACAACGGTTATTCCTGGTGGTTTAGGCGTACAATGTCCTGAAGAATATTTAAGAAAAAAGCACCCCTCGTCGCCTAGAATTACCTACCGCGGTCGACCATACCTTCGATTATCGCGCCCACTCTCCCATTAGTCGGCAGAGGTGGTTGTGTTGCGATAGCCCAGTATGATATTCTAAGGCGTTACGCTGATGAATATTCTACGGAATTGCCATAGGCGTTGAACGCTACACGGACGATACGAATTTATGTATAGAGCGGGTCATCGAAAGGTTATACTCTTGTAGTTAACATGTAGCCCGGCCCTATTAGTACAGCAGTGCCTTGAATGACATTCTCATTATTAAATTTTCTCTACAGCCAAACGACCAAGTGCATTTCCACGGAGCGCGATGGAGATTCATTCACTCGGCAGCTCTGTAATAGGGACTAAAAGAGTGATGATAATCATGAGTGCCGCGTTATGGTGGTGTCGGAACAGAGCGGTCTTACGGCCAGTCGTATTCCTTCTCGAGTTCCGTCCAGTTAAGCGTGACACTCCCAGTGTACCCGCAAACCGTGATGGCTGTGCTTGGAGTCAATCGCATGTAGGATGGTCTCCAGACACCGGGGCACCAGTTTTCACGCCCAAAGCATAAACGACGAGCAGTCATGAAAGTCTTAGAACTGGACGTGCCGTTTCTCTGCGAATAATACCTCGAGCTGTACCGTTGTTGCGCTGCCTAGATGCAGTGCTGCTCTTATCACATTTGCTTCGACGACTGCCGCCTTCGCTGTTTCCCTAGACACTCAACAATAAGCGCTTTTTGTAGGCAGGGGCACCCCCTATCAGTGGCTGCGCCAAAACATCTTCGGATCCCCTTGTCCAATCAAATTGATCGAATTCTTTCATTTAAGACCCTAATATGACATCATTAGTGATTAAATGCCACTCCCAAAATTCTGCCTAGAAATGTTTAAGTTCGCTCCACTAAAGTTGTTTAAAACGACTACTAAATCCGCGTGATAGGGGATTTCATATTTAATCTTTTATCGTAAGGAACAGCCGATCTTAATGGATGGCCGCAGGTGGTATGGAAGCTATAAGCGCGGGTGAGAGGGTAATTAGGCGTGTTCACCTACACTACGCTAACGGGCGATTCTATAAGATTGCACATTGCGTCTACTTATAAGATGTCTCAACGGCATGCGCAACTTGTGAAGTGCCTACTATCCTTAAACGCATATCTCGCACAGTAACTCCCCAATATGTGAGCATCTGATGTTGCCCGGGCCGAGTTAGTCTTGTGCTCACGGAACTTATTGTATGAGTAGTGATTTGAAAGAGTTGTCAGTTAGCTCGTTCAGGTAATGGTTCCTCACACTACGTCAAAATAAGAGAGCGGTCGTGACATTATCCGTGATTTTCTCACTACTATCAGTACTCACGACTCGATTCTGCCGCAGCCACGTATCGCCAGAAAGCCAGTCAGCATTAAGGAGTGCTCTGGGCAGGACAACTCGCATAGTGAGAGTTACATGTTCGTTGGGCTCTTCCGACACGAACCTCAGTTGGCCTACATCCTACCTGAGGTCTGTGCCCCGGTGGTGAGAAGTGCGCATTTCGTTCTTGCAGCTCGTCAGTACTTTCAGAATCATGGCCTGCACGGTAGAATGACGCTTATAATGGACTTCGACATGGCAATAACCCCCCGTTTCTACCTCAAGAGGAGAAAAGTATTAACATGACTGCTGTCGGCACAAGGGCCAAAGAAGTCTCCAATTTCTTATTCCCGAATAACATCCGTCTCCCTGCGGGAAAATCACCGACCGCATTTCATAGAAGCCTGGGGGAACAGATAGGTCTAATTAGCTTAAGAGAGTAAATCCTGGGATCATTCAGTAGTAACCACAAACTTACGCTGGGGCTTCTTTGGCGGATTTTTACAGATACTAACCAGGTGATTTGAAGTAAATTAGTTGAGGATTTAGCCGCGCTATCCGGTAATCTCCAAATTAAAACATACCGTTCCATGAGGGCTAGAATTACTTACCGGCCTTCACCATGCCTGCGCTATACGCGCCCACTCTCCCGTTTATCCGTCCAAGCGGATGCAATGCGATCCTCCGCTAAGATATTCTTACGTGTAACGTAGCTATGTATTTTACAGAGCTGGCGTACGCGTTGAACACTTCACAGATGATAGGGATTCGGGTAAAGAGCGTGTTATTGGGGACTTACACAGGCGTAGACTACAATGGGCCCAACTCAATCACAGCTCGAGCGCCTTGAATAACGTACTCATCTCTATACATTCTCGACAATCTATCGAGCGACTCGATTATCAACGGGTGTCTTGCAGTTCTAATCTCTTGCCAGCATCGTAATAGCCTCCAAGAGATTGATGATAGTCATGGGCACAGAGCTGAGACGGCGCCGATGGATAGCGGACTTTCGGTCAACCACAATTCCCCACGAGACAGGTCCTGCCGTGCGCATCACTCTGAATGTACAAGCAACCCAAGAGGGCTGAGCCTGGACTCAGCTGGTTCCTGGGTGAGCTCGAGACTCGGGGTGACAGCTCTTCATACATAGAGCGGGGGCGTCGAACGGTCGTGAAAGTCATAGTACCCCGGGTACCAACTTACTGAGGATATTGCTTGAAGCTGTACCGTTTTAGGGGGGGAACGCTGAAGATCTCTTCTTCTCATGACTGAACTCGCGAGGGTCGTGATGTCGGTTCCTTCAAAGGTTAAAGAACAAAGGCTTACTGTGCGCAGAGGAACGCCCATTTAGCGGCTGGCGTCTTGAATCCTCGGTCCCCCTTGTCTTTCCAGATTAATCCATTTCCCTCATTCACGAGCTTACCAAGTCAACATTGGTATATGAATGCGACCTTGAAGAGGCCGCTTAAAAATGGCAGTGGTTGATGCTCTAAACTCCATTTGGTTAACTCGTGTATCACCGCGATAGGCTGATAGAGGTTTAATATTGTATAGCAAGGTACTTCCGGTCTCAATGAATGGCCGGGAAAGGTACGCGCGCGGTATGGGAGGGTCAAGGGGCCAATAGAGAGGCTCCTCTCTCACTCGCTAGGAGGCAATTGTATAACAATGCTTACTGCATCGATACATAAAACGTGTCCATCGGTTGCCCAAACTGTGAAGTGTCTATCACCCCTAGGCCCGTTTCCCGCATATAAACGCCAGGTTGTATCCGCATTTGATGCTACCGTGGATGAGTCAGCGTCGAGCACGCGGCACTTATTGCATGAGTAGGGTTGACTAAGAGCCGTTAGATGCCTCGCTGTACTAATAGTTGTCGACAGATCGTCAAGATTAGAAAACGGTACCAGCATTTTCGGAGGTTCTCTAACTAGTATGGATAGCCGTGTCTTCACTGTGCTGCGGCTACCCATCGCCTGAAATCCAGTTGGTGTCAAGCCATCCCCTGTCCAGGACGCCGCATGTAGTGAAACATACACGTTGCTCGGGTTCACCCCGGTCCGTTCTGAGTCGACCAAGGACACAATCGAGCTCCGATCCGTACTGTCGAGAAACTTGTATCCGACCCCCGCAGCTTGCCAGCTCTTCGGGTATCATGGAGCCTATGGTTGAACGTGTCCGATAACGAACTTCGACATGATAAAGTCCCCCCCTCGCGACTACCAGAGAAGAAGACTACTGAGTTGAGCGTTCCCAGCACTTCAGCCAAGGAAGCTACCAATTTTTAGTTTCCGAGTGTCACGTCTGACCTCGCGGGTAGATTGCCGAGCGTAGAGCTTACGAGCCAGCGGAAACAGTAAGGCCTTTTTAAGTATGGGGAGTAAGTGATCGAACGCTTCAGATGTGACCATATACTTAGGCTGGATCTCGTCCCGTGAATTTTAACCCTCACCAACTACGAGATATGAGGTAAGCCAAAAAAGCACGTGGTGGCGCTCACCGACTGTTCCCAAACTGTAACTCATCGTTCCGTCAAGGCCTGACTTACTTCCCGGCCCTTTCCATGCGCGGACCATACCGTCCTAGTTCTTCGGTTATGTTTCCGATGTAGGAGTGAGCCTACCTCCGTTTGCGTCTTGTTACCAATGAAAAAGCTATGCACTTTGTACAGGGTGCCATCGGGTTTCTGAACTCTCAGATAGTGGGGATCCCGGGAAAGGGCCTATATTTGCGGTCCAACTTAGGCGTAAACCTCGATGCTACCTACTCAGACCCACCCCGCGCGGGGTAAATATGGCACTCATCCCAGCTGGTTCTTGGCGTTCTACGCAGCCACATGTTCATTAACAGTTGTCTGGTAGCACAAAAGTATTACCATGGTCCTAGAAGCCCGGCAGAGTTAGTTCGAACCTAATGCCACAAATGAGACAGGACGCCAATGGGTACCGGACATTAGGTCGAGCTCAGTTCGGTAACGGAGAGACCCTGCGGCGTACTTAATTATGCATATGAAACGCGCCCAAGTGACGCCAGGCAAGTCTCAGCAGGTTCCCGTGTTAGCTCGAGGGTAAACATACAAGCCGATTGAACATGGGTTGGGGGCTTCAAATCGTCGAGGACCCCACAGTACCTCGGAGACCAAGTAGGGCACCCTATAGTTCGAAGCAGAACTATTTCGAGGGGCGAGCCCTCATCGTCTCTTCTGCGGATGACTTAACACGCTAGGGACGTGGAGTCGATTCCATCGATGGTTATAAATCAAAGATTCGGAATGCTGTCTGGAGGGTGAATCTAACGGTGCGTATCTCGATTGCTCAGTCGCTTTTCGTACTGCGCGAAAGTTCGTACCGCTCATTCACTTGGTTCCGAAGCCTGTCCTGATATATGAATCCAAACTAGAGCGGGGCTCTTGACATTTGGAGTTGTAAATATCTAATACTCCAATCGGCTTTTACGTGCACCACCGCGGGCGGCTGACGAGGGTCTCACACCGAGAAACAAGACAGTTCCGGGC";

    cout << "Sequence X: " << X << endl;
    cout << "Sequence Y: " << Y << endl;

    cout << "Alignment:" << endl;
    auto start = std::chrono::system_clock::now();
    pair<string, string> alignment = hirschbergAlignment(X, Y);
    auto end = std::chrono::system_clock::now();
    cout << "Aligned X: " << alignment.first << endl;
    cout << "Aligned Y: " << alignment.second<<endl;
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()<<endl;
    auto start2 = std::chrono::system_clock::now();
    int numCurrThreads = 1;
    pair<string, string> alignment_parallel = hirschbergAlignment_parallel(X, Y);
    auto end2 = std::chrono::system_clock::now();
    cout << "Aligned X: " << alignment_parallel.first << endl;
    cout << "Aligned Y: " << alignment_parallel.second<<endl;
    cout << "time: " << std::chrono::duration_cast<std::chrono::milliseconds>(end2 - start2).count()<<endl;
    cout << alignment.first.length() << " " << alignment_parallel.first.length() << endl;
    cout << alignment.second.length() << " " << alignment_parallel.second.length() << endl;
    if (alignment.first != alignment_parallel.first){
        highlightDifferences(alignment.first, alignment_parallel.first);
    }else{
        cout << "Aligned X SAME!" << endl;
    }

    if (alignment.second != alignment_parallel.second){
        highlightDifferences(alignment.second, alignment_parallel.second);
    }else{
        cout << "Aligned Y SAME!" << endl;
    }
}

/*
Results:

For N = 10

Sequential 0
Parallel 1

For N = 100

Sequential 3 
Parallel 4

For N = 1000

Sequential 76ms
Parallel 30ms

For N = 5000

Sequential 1043ms
Parallel 460ms

For N = 10000

Sequential 4041ms
Parallel 1935ms
*/
